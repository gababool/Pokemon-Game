For task 8, we were required to make some changes in the way we calculated the multiplier for which types were effective against other types. 

Before we received task 8, our type calculation (this being, the class and methods that handled calculating and returning the effectiveness and multiplier of the pokemon using a skill), was a very big, two part switch statement. 

This meant that we had a switch case for the attacker, with the cases FIRE, WATER, GRASS. Then, inside of each case of the attackers type, we had a switch case for the defender type. 
It looked like this; 

switch (attackerType) 
	case: “Fire”
		switch (defenderType) {
			case: “Fire”
				multiplier = 0.5;
				break;
		 	// and the list goes on.

This resulted in our method being long and it also wasn’t very easy to follow. Adding four more types would make for even more unreadable code. When tasked with adding four more types of pokemon, our group decided to rethink how we wanted our TypeEffectiveness class. 

Firstly we made some minor changes in our PokemonType class. These changes consisted of adding enums for the new types of pokemon introduced. 

The major changes were in the way we returned the multiplier of the attacker vs defender. Instead of having a switch case in another switch case, we created methods for each type, that would return the effectiveness of that type when compared to another. 

In these methods, we gave the parameter defenderType. We created a switch statement on the defenderType, which returned the effectiveness of the type in the name of the method versus the other types. This meaning, the methods name, “calculate-attackersType-Multiplier”, shows we are calculating the multiplier of the attackerType.

As an example, for calculateFireMultiplier, we created a switch statement that returned the effectiveness when looking at Fire versus the other types (fire included). The attacker is of type Fire, and the effectiveness returned is that of fire versus said type of the defender. 

So, we returned one of three values. In the case that the attackerType is strong vs defenderType, we return super effective, if the attackerType is weak vs the defenderType, we return not very effective. For all the cases where the attackerType is neither strong nor weak vs the defenderType, we bundled up the cases under a default, where we return “normal effectiveness”. 

The last step was to create the method that returns the multiplier (and also the String effectiveness). In the method, we gave the parameters of attackerType and defenderType. In the method, we created a switch statement on attackerType. For case “Fire”, this meant that if the attackerType was fire, we called the method calculateFireMultiplier and gave the parameter defenderType. We then did the same for all the other types, calling the corresponding calculate(type)Multiplier. 

These changes all made the code easier to understand. These changes also allow us to more easily add new types in the future. 
Another change we made when adding the new types, was to create constants accessible in the entire class. These variables were the multiplier returned from each method. Meaning that if the customer a week from now decides that when an attack is super effective, it’s now supposed to multiply the damage by 2.5 instead of 2.0. This means that we only need to change the value of super_effective multiplier at one place, that being where we create the variable super effective. 
	







