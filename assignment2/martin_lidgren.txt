

Task 8 - Change Request: New Pokemon Types.

The request to add new types required a few changes in our code, mainly in the PokemonType enum and in
the TypeEffectiveness class. Firstly we had to add the new types to the PokemonType enum so that we are able to
create PokÃ©mon of those types, and also so that we can calculate their effectiveness based on what type
they are and what type they are attacking. This part was the easiest, since we simply just had to add
the names of the new types to the enum values we already had. I think that this demonstrates that our initial code was rather modular, since we did not have to make many more changes for the new types to fit in our program.

The next change was made to our switch case in calculateMultiplier() inside the TypeEffectiveness class, 
where we had to make new switch cases for the different types and return different multipliers for the new types. 
While doing this we realised that the massive, nested switch statement that we currently used was not really that readable or modular,so we changed our design into a smaller switch statement where we called separate methods for calculations for each type which we created. For example, switch (attackerType) -> case FIRE -> calculateFireMultiplier(). Before that we had one switch for the attacker and a nested switch for the defender.
This made the code much easier to understand since it looks much neater, and if we were to add new types, we can just create a new method to call on the switch statement, without performing surgery on a massive one, increasing modularity.

Lastly, we also realised that returning the actual multiplier for every case, i.e 0.5 or 2.0, was not as readable
as just assigning those to final variables, since they will not ever change. These variables we named
after the effectivenes, for example private final SUPER_EFFECTIVE = 2.0. We also removed the case for the NORMAL Pokemon type that we initially had, since it does not get affected by type multipliers anyway, so we just had NORMAL_EFFECTIVENESS = 1.0, as a default case in the switch statement inside calculateMultiplier().